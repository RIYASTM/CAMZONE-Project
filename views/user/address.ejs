<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Addresses</title>
    <link rel="stylesheet" href="/stylesheet/user/profile.css">
    <style>
        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background-color: #2a2a2a;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            border-radius: 10px;
            overflow-y: auto;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
            color: #fff;
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 25px;
            border-bottom: 1px solid #444;
        }

        .modal-header h3 {
            color: #f9a826;
            margin: 0;
            font-size: 22px;
            font-weight: 500;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            color: #ccc;
            cursor: pointer;
            padding: 0;
            line-height: 1;
            transition: color 0.3s ease;
        }

        .modal-close:hover {
            color: #f9a826;
        }

        .modal-body {
            padding: 25px;
        }

        /* Form styles */
        .form-row {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .form-group {
            flex: 1;
            min-width: 250px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
            color: #ccc;
        }

        .form-group label .required {
            color: #f00;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 12px 15px;
            background-color: #333;
            border: none;
            border-radius: 5px;
            color: #fff;
            font-size: 14px;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: 1px solid #f9a826;
            background-color: #3a3a3a;
        }

        .form-group .is-invalid {
            border: 1px solid #f00;
        }

        .form-group .invalid-feedback {
            color: #f00;
            font-size: 12px;
            margin-top: 5px;
        }

        /* Select dropdown styling */
        .select-wrapper {
            position: relative;
        }

        .select-wrapper::after {
            content: '';
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            width: 0;
            height: 0;
            border-left: 6px solid transparent;
            border-right: 6px solid transparent;
            border-top: 6px solid #ccc;
            pointer-events: none;
        }

        .select-wrapper select {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            padding-right: 30px;
            cursor: pointer;
        }

        /* Phone input styling */
        .phone-input-wrapper {
            display: flex;
            align-items: center;
        }

        .country-code {
            background-color: #333;
            display: flex;
            align-items: center;
            padding: 0 10px;
            border-radius: 5px 0 0 5px;
            border-right: 1px solid #444;
            height: 42px;
            color: #fff;
            position: relative;
            cursor: pointer;
            width: 60px;
        }

        .arrow-down {
            display: inline-block;
            width: 0;
            height: 0;
            margin-left: 5px;
            border-left: 5px solid transparent;
            border-right: 5px solid transparent;
            border-top: 5px solid #ccc;
        }

        .phone-input-wrapper input {
            border-radius: 0 5px 5px 0;
            flex: 1;
        }

        /* Address Type Radio Buttons */
        .address-type-options {
            display: flex;
            gap: 15px;
        }

        .radio-label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }

        .radio-label input[type="radio"] {
            width: auto;
            margin-right: 5px;
            cursor: pointer;
        }

        .radio-label span {
            font-size: 14px;
        }

        /* Button styles */
        .form-actions {
            margin-top: 25px;
            display: flex;
            justify-content: flex-end;
        }

        .btn-save {
            background-color: #f9a826;
            color: #fff;
            border: none;
            padding: 12px 24px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: background-color 0.3s;
        }

        .btn-save:hover {
            background-color: #e89710;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .form-row {
                flex-direction: column;
                gap: 15px;
            }
            
            .form-group {
                min-width: 100%;
            }
            
            .modal-content {
                width: 95%;
                max-height: 85vh;
            }
        }
    </style>
</head>
<body>
    <header>
        <%- include('../partials/users/header',{search}) %>
    </header>
    <div class="container">
        <!-- Navigation Breadcrumb -->
        <div class="breadcrumb">
            <a href="/">Home</a>
            <span class="separator">></span>
            <a href="/myAccount">My Account</a>
            <span class="separator">></span>
            <a href="/profile">My Details</a>
            <span class="separator">></span>
            <span class="current">My Address</span>
        </div>

        <!-- Main Content -->
        <div class="content">
            <!-- Sidebar Navigation -->
            <%- include('../partials/users/sideBar', {currentPage : 'My Address'}) %>

            <!-- Address List -->
            <div class="profile-form">
                <h2>Saved addresses</h2>
                
                <div class="address-table-container">
                    <table class="address-table">
                        <thead>
                            <tr>
                                <th>Addresses</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (user && address && address.length > 0) { %>
                                <% address.forEach(addr => { %>
                                    <tr>
                                        <td><%= addr.name %>, <%= addr.streetAddress %>, <%= addr.city %>, <%= addr.state %>, <%= addr.country %>, <%= addr.pincode %></td>
                                        <td class="action-buttons">
                                            <button class="btn-icon edit-btn" title="Edit" data-id="<%= addr._id %>" data-address='<%- JSON.stringify(address) %>'>‚úèÔ∏è</button>
                                            <button class="btn-icon delete-btn" title="Delete" onclick="deleteAddress('<%= addr.id %>')">üóëÔ∏è</button>
                                        </td>
                                    </tr>
                                <% }) %>
                            <% }else{ %>
                                <tr>
                                    <td>No Addresses</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
                
                <div class="form-actions">
                    <button class="btn-save add-btn" onclick="openAddModal()">Add New Address</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Address Modal -->
    <div class="modal-overlay" id="addressModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">Add Address</h3>
                <button class="modal-close" id="closeModal">√ó</button>
            </div>
            
            <div class="modal-body">
                <form id="addressForm">
                    <input type="hidden" id="addressId" name="addressId">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="name">Name <span class="required">*</span></label>
                            <input type="text" id="name" name="name" placeholder="Name">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="form-group">
                            <label for="phone">Phone  <span class="required">*</span></label>
                            <div class="phone-input-wrapper">
                                <div class="country-code" id="countryCode1">+91</div>
                                <input type="tel" id="phone" name="phone" placeholder="Phone Number 1">
                            </div>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="country">Country/Region <span class="required">*</span></label>
                            <div class="select-wrapper">
                                <select id="country" name="country" >
                                    <option value="" disabled>Select your Country/Region</option>
                                    <option value="India">India</option>
                                    <option value="USA">United States</option>
                                    <option value="UK">United Kingdom</option>
                                    <option value="UAE">UAE</option>
                                    <option value="KSA">SAUDI ARABIA</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="city">Town/City <span class="required">*</span></label>
                            <input type="text" id="city" name="city" placeholder="Town / City" >
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="streetAddress">Street Address <span class="required">*</span></label>
                            <input type="text" id="streetAddress" name="streetAddress" placeholder="House no and Street Name" >
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="form-group">
                            <label for="landMark">Apartment / LandMark</label>
                            <input type="text" id="landMark" name="landMark" placeholder="LandMark Name">
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="state">State <span class="required">*</span></label>
                            <div class="select-wrapper">
                                <select id="state" name="state" >
                                    <option value="" disabled>Select your State</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="district">District <span class="required">*</span></label>
                            <input type="text" id="district" name="district" >
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="email">Email <span class="required">*</span></label>
                            <input type="email" id="email" name="email" placeholder="example@gmail.com" >
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="form-group">
                            <label for="pincode">Pin code <span class="required">*</span></label>
                            <input type="text" id="pincode" name="pincode" placeholder="Pincode" >
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="addressType">Address Type</label>
                            <div class="address-type-options">
                                <label class="radio-label">
                                    <input type="radio" name="addressType" value="home" checked>
                                    <span>Home</span>
                                </label>
                                <label class="radio-label">
                                    <input type="radio" name="addressType" value="work">
                                    <span>Work</span>
                                </label>
                                <label class="radio-label">
                                    <input type="radio" name="addressType" value="other">
                                    <span>Other</span>
                                </label>
                            </div>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="form-group">
                            <label for="altPhone">Phone 2 <span class="required">*</span></label>
                            <div class="phone-input-wrapper">
                                <div class="country-code" id="countryCode2">+91</div>
                                <input type="tel" id="altPhone" name="altPhone" placeholder="Phone number" >
                            </div>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="submit" class="btn-save" id="saveAddress">Add Address</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <footer>
        <%- include('../partials/users/footer') %>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- <script src="/javascript/users/address.js"></script> -->

    <script>

        const countryCodeMap = {
            "India": "+91",
            "USA": "+1",
            "UK": "+44",
            "UAE" : "+971",
            "KSA" : "+966"
        };

        const countryStateMap = {
            "India": ["Kerala", "Tamil Nadu", "Karnataka", "Maharashtra", "Delhi"],
            "USA": ["California", "Texas", "Florida", "New York", "Illinois"],
            "UK": ["England", "Scotland", "Wales", "Northern Ireland"],
            "UAE" : ['Abu Dhabi', 'Dubai', 'Sharjah', 'Ajman', 'Umm Al-Quwain', 'Ras Al Khaimah', 'Fujairah'],
            "KSA" : ['Riyadh', 'Makkah', 'Madinah', 'Qassim', 'Hail', 'Tabuk', 'Jizan', 'Najran']
        };


        document.addEventListener('DOMContentLoaded', () => {
            const modal = document.getElementById('addressModal');
            const closeModal = document.getElementById('closeModal');
            const modalTitle = document.getElementById('modalTitle');
            const saveAddressBtn = document.getElementById('saveAddress');
            const addressForm = document.getElementById('addressForm');
            const addressIdInput = document.getElementById('addressId');
            const countrySelect = document.getElementById('country');
            const stateSelect = document.getElementById('state');
            const countryCode1 = document.getElementById('countryCode1');
            const countryCode2 = document.getElementById('countryCode2');

            // Update country code based on selected country
            countrySelect.addEventListener('change', (e) => {
                const selectCountry = e.target.value

                const code = countryCodeMap[selectCountry] || "+91";
                countryCode1.textContent = code;
                countryCode2.textContent = code;

                const states = countryStateMap[selectCountry] || []

                stateSelect.innerHTML = `<option value="" disabled>Select your State</option>`;
                states.forEach(state => {
                    const option = document.createElement('option');
                    option.value = state
                    option.textContent = state
                    stateSelect.appendChild(option)
                })

            });

            // Close modal
            closeModal.addEventListener('click', () => {
                modal.classList.remove('active');
                addressForm.reset();
                clearErrors(addressForm);
            });

            // Close modal when clicking outside
            window.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('active');
                    addressForm.reset();
                    clearErrors(addressForm);
                }
            });

            // Handle form submission
            addressForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const formData = new FormData(addressForm);
                const jsonData = Object.fromEntries(formData);
                Object.keys(jsonData).forEach(key => {
                    if (typeof jsonData[key] === 'string') {
                        jsonData[key] = jsonData[key].trim();
                    }
                });

                let errors = validateForm(jsonData);
                if (errors) {
                    displayFormErrors(addressForm, errors);
                    return;
                }

                const isUpdate = saveAddressBtn.textContent === 'Update Address'
                const url = isUpdate ? '/editAddress' : '/addAddress'
                const method = isUpdate ? 'PATCH' : 'POST'

                try {
                    const response = await fetch(url, {
                        method: method,
                        body: JSON.stringify(jsonData),
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();

                    if (!data.success) {
                        if (data.errors) {
                            displayFormErrors(addressForm, data.errors);
                        } else {
                            Swal.fire('Error', data.message || `Failed to ${isUpdate ? 'update' : 'add'} address.`, 'error');
                        }
                        return;
                    }

                    Swal.fire('Success', data.message || `Address ${isUpdate ? 'updated' : 'added'} successfully!`, 'success')
                        .then(() => {
                            modal.classList.remove('active');
                            addressForm.reset();
                            window.location.reload();
                        });
                } catch (error) {
                    console.error(`Error ${isUpdate ? 'updating' : 'adding'} address:`, error);
                    Swal.fire('Error', `Something went wrong while ${isUpdate ? 'updating' : 'adding'} the address.`, 'error');
                }
            })

            function displayFormErrors(form, errors) {
                clearErrors(form);
                if (errors && typeof errors === 'object') {
                    Object.entries(errors).forEach(([field, message]) => {
                        const input = form.querySelector(`[name="${field}"]`);
                        if (input) {
                            input.classList.add('is-invalid');
                            const feedback = input.parentElement.querySelector('.invalid-feedback');
                            if (feedback) {
                                feedback.textContent = message;
                            }
                        }
                    });
                }
            }

            function clearErrors(form) {
                form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
                form.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
            }

            window.openAddModal = function() {
                modalTitle.textContent = 'Add Address';
                saveAddressBtn.textContent = 'Add Address';
                addressForm.reset();
                addressIdInput.value = '';
                countryCode1.textContent = '+91';
                countryCode2.textContent = '+91';
                modal.classList.add('active');
            };

            document.querySelectorAll('.edit-btn').forEach(button => {
                button.addEventListener('click', () => {
                    modal.classList.add('active');
                    modalTitle.textContent = 'Edit Address';
                    saveAddressBtn.textContent = 'Update Address';
                    const id = button.dataset.id

                    const addressData = JSON.parse (button.dataset.address)

                    const address = addressData.filter(addr => addr._id == id); // Use loose equality since id may be string

                    if (address) {
                        addressIdInput.value = address[0]._id;
                        document.getElementById('name').value = address[0].name || '';
                        document.getElementById('phone').value = address[0].phone || '';
                        document.getElementById('country').value = address[0].country || '';
                        document.getElementById('city').value = address[0].city || '';
                        document.getElementById('streetAddress').value = address[0].streetAddress || '';
                        document.getElementById('landMark').value = address[0].landMark || address[0].landMark || '';
                        document.getElementById('district').value = address[0].district || '';
                        document.getElementById('email').value = address[0].email || '';
                        document.getElementById('pincode').value = address[0].pincode || '';
                        document.getElementById('altPhone').value = address[0].altPhone || address[0].phone || '';


                        const country = address[0].country || 'India';
                        const states = countryStateMap[country] || [];
                        stateSelect.innerHTML = '<option value="">Select your State</option>';
                        states.forEach(state => {
                            const option = document.createElement('option');
                            option.value = state;
                            option.textContent = state;
                            stateSelect.appendChild(option);
                        });
                        stateSelect.value = address[0].state || '';

                        
                        const addressTypeRadio = document.querySelector(`input[name="addressType"][value="${address[0].addressType || 'home'}"]`);
                        if (addressTypeRadio) {
                            addressTypeRadio.checked = true;
                        }

                        const countryCode = countryCodeMap[address[0].country] || '+91';
                        countryCode1.textContent = countryCode;
                        countryCode2.textContent = countryCode;
                    } else {
                        Swal.fire('Error', 'Address not found.', 'error');
                        return;
                    }
                
                })
            })

            window.deleteAddress = async function(id) {
                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: 'Do you want to delete this address?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#f9a826',
                    cancelButtonColor: '#dc3545',
                    confirmButtonText: 'Yes, delete it!'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/deleteAddress/${id}`, {
                            method: 'PATCH',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        const data = await response.json();

                        if (!data.success) {
                            Swal.fire('Error', data.message || 'Failed to delete address.', 'error');
                            return;
                        }

                        Swal.fire('Deleted!', data.message || 'Address deleted successfully.', 'success')
                            .then(() => {
                                window.location.reload(); // Refresh to update address list
                            });
                    } catch (error) {
                        console.error('Error deleting address:', error);
                        Swal.fire('Error', 'Something went wrong while deleting the address.', 'error');
                    }
                }
            };

            
        

            function validateForm(data) {
                const namePattern = /^[a-zA-Z\s]+$/;
                const phonePattern = {
                    'USA' : /^\+1[2-9]\d{2}[2-9]\d{6}$/,
                    'India' : /^\+91[6-9]\d{9}$/,
                    'UK' : /^\+44\d{10}$/,
                    'UAE' : /^\+971d{8,9}$/,
                    'KSA' : /^\+966d{8,9}$/
                };
                const pincodePattern = /^\d{5,10}$/;
                let errors = {};

                if (!data.name) {
                    errors.name = "Name is required!";
                } else if (!namePattern.test(data.name)) {
                    errors.name = "Name can only contain letters and spaces!";
                }

                // Phone
                if (data.phone) {
                    if (data.country && phonePattern[data.country]) {
                        if (!phonePattern[data.country].test(data.phone)) {
                            errors.phone = "Invalid phone number format!";
                        }
                    } else {
                        errors.phone = "Unsupported country for phone validation!";
                    }
                } else {
                    errors.phone = "Phone number 1 is required!";
                }

                // Alternate Phone
                if (data.altPhone) {
                    if (data.country && phonePattern[data.country]) {
                        if (!phonePattern[data.country].test(data.altPhone)) {
                            errors.altPhone = "Invalid phone number format!";
                        }
                    } else {
                        errors.altPhone = "Unsupported country for phone validation!";
                    }
                } else {
                    errors.altPhone = "Phone number 2 is required!";
                }

                if (!data.country) {
                    errors.country = "Country is required!";
                }

                if (!data.city) {
                    errors.city = "Town/City is required!";
                }

                if (!data.streetAddress) {
                    errors.streetAddress = "Street address is required!";
                }

                if(!data.landMark){
                    errors.landMark = "Appartment or LandMark is required!"
                }

                if (!data.state) {
                    errors.state = "State is required!";
                }

                if (!data.district) {
                    errors.district = "District is required!";
                }

                if (!data.pincode) {
                    errors.pincode = "Pincode is required!";
                } else if (!pincodePattern.test(data.pincode)) {
                    errors.pincode = "Pincode must be 5-10 digits!";
                }

                return Object.keys(errors).length > 0 ? errors : null;
            }
        });
    </script>

</body>
</html>