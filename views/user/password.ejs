<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Password</title>
    <link rel="stylesheet" href="/stylesheet/user/profile.css">
</head>
<body>
    <header>
        <%- include('../partials/users/header', { search , cart}) %>
    </header>
    <div class="container">
        <!-- Navigation Breadcrumb -->
        <div class="breadcrumb">
            <a href="/">Home</a>
            <span class="separator">></span>
            <a href="/myAccount">My Account</a>
            <span class="separator">></span>
            <a href="/profile">My Details</a>
            <span class="separator">></span>
            <span class="current">Change Password</span>
        </div>

        <!-- Main Content -->
        <div class="content">
            <!-- Sidebar Navigation -->
            <div class="sidebar">
                <h3>My Details</h3>
                <ul>
                    <li><a href="/profile">My Profile</a></li>
                    <li class="active"><a href="/passwordManage">Change Password</a></li>
                    <li><a href="/address">My Address</a></li>
                </ul>
            </div>

            <!-- Change Password Form -->
            <div class="profile-form">
                <h2>Change Password</h2>
                <form id="changePasswordForm">
                    <!-- Current Password and OTP in the same row -->
                    <div class="form-row">
                        <div class="form-group">
                            <label for="currentPassword">Current Password <span class="required">*</span></label>
                            <div class="input-with-button">
                                <input type="password" id="currentPassword" name="currentPassword" class="currentPassword" placeholder="Current Password" required>
                                <button type="button" id="sendOtpButton" class="btn-verify">Send OTP</button>
                            </div>
                            <div class="invalid-feedback currentPasswordError"></div>
                        </div>

                        <div class="form-group">
                            <label for="otp">Enter OTP <span class="required">*</span></label>
                            <div class="otp-section">
                                <div class="otp-input-wrapper" id="otpInputs">
                                    <input type="text" class="otp-input" maxlength="1" required>
                                    <input type="text" class="otp-input" maxlength="1" required>
                                    <input type="text" class="otp-input" maxlength="1" required>
                                    <input type="text" class="otp-input" maxlength="1" required>
                                    <input type="text" class="otp-input" maxlength="1" required>
                                    <input type="text" class="otp-input" maxlength="1" required>
                                </div>
                                <button type="button" id="verifyOtpButton" class="btn-verify">Verify</button>
                            </div>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="newPassword">New Password <span class="required">*</span></label>
                        <input type="password" id="newPassword" name="newPassword" class="newPassword" placeholder="New Password" required disabled>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="form-group">
                        <label for="confirmPassword">Confirm New Password <span class="required">*</span></label>
                        <input type="password" id="confirmPassword" name="confirmPassword" class="confirmPassword" placeholder="Confirm New Password" required disabled>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn-save" disabled>Update Password</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <footer>
        <%- include('../partials/users/footer') %>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('changePasswordForm');
            const otpInputs = document.querySelectorAll('.otp-input');
            const currentPasswordInput = document.getElementById('currentPassword');
            const sendOtpButton = document.getElementById('sendOtpButton');
            const verifyOtpButton = document.getElementById('verifyOtpButton');
            const newPasswordInput = document.getElementById('newPassword');
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const submitButton = form.querySelector('button[type="submit"]');
            let isOtpSent = false;
            let isOtpVerified = false;

            // OTP Input Handling
            otpInputs.forEach((input, index) => {
                input.addEventListener('input', (e) => {
                    const value = e.target.value;
                    // Allow only numbers
                    if (!/^\d*$/.test(value)) {
                        e.target.value = '';
                        return;
                    }

                    // Move to next input if current is filled
                    if (value.length === 1 && index < otpInputs.length - 1) {
                        otpInputs[index + 1].focus();
                    }
                });

                input.addEventListener('keydown', (e) => {
                    // Move to previous input on backspace if current is empty
                    if (e.key === 'Backspace' && !input.value && index > 0) {
                        otpInputs[index - 1].focus();
                    }
                });

                // Paste handling
                input.addEventListener('paste', (e) => {
                    e.preventDefault();
                    const pasteData = e.clipboardData.getData('text').replace(/\D/g, '');
                    if (pasteData.length > 0) {
                        for (let i = 0; i < Math.min(pasteData.length, otpInputs.length); i++) {
                            otpInputs[i].value = pasteData[i] || '';
                            if (i < otpInputs.length - 1 && pasteData[i]) {
                                otpInputs[i + 1].focus();
                            }
                        }
                    }
                });
            });

            // Send OTP
            sendOtpButton.addEventListener('click', async () => {
                const currentPassword = currentPasswordInput.value.trim();
                if (!currentPassword) {
                    displayFormError('currentPassword', 'Current password is required!');
                    return;
                }

                try {
                    sendOtpButton.disabled = true;
                    const response = await fetch('/checkPassword', {
                        method: 'POST',
                        body: JSON.stringify({ currentPassword }),
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();

                    if (data.success) {
                        Swal.fire('Success', 'OTP sent successfully!', 'success');
                        isOtpSent = true;
                        currentPasswordInput.disabled = true;
                        sendOtpButton.disabled = true;
                        otpInputs.forEach(input => input.disabled = false);
                        verifyOtpButton.disabled = false;
                    } else {
                        displayFormError('currentPassword', data.message || 'Failed to send OTP!');
                        document.querySelector(".currentPasswordError").textContent = data.errors.currentPassword
                        isOtpSent = false;
                    }
                } catch (error) {
                    console.error('Error sending OTP:', error);
                    Swal.fire('Error', 'Failed to send OTP.', 'error');
                    isOtpSent = false;
                } finally {
                    sendOtpButton.disabled = false;
                }
            });

            // Verify OTP
            verifyOtpButton.addEventListener('click', async () => {
                const otp = Array.from(otpInputs).map(input => input.value).join('');
                if (otp.length !== 6 || !/^\d{6}$/.test(otp)) {
                    displayFormError('otp', 'Please enter a valid 6-digit OTP!');
                    return;
                }

                try {
                    verifyOtpButton.disabled = true;
                    const response = await fetch('/confirmOTP', {
                        method: 'POST',
                        body: JSON.stringify({ otp }),
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();

                    if (data.success) {
                        Swal.fire('Success', 'OTP verified successfully!', 'success');
                        isOtpVerified = true;
                        // Enable other fields
                        newPasswordInput.disabled = false;
                        confirmPasswordInput.disabled = false;
                        submitButton.disabled = false;
                        otpInputs.forEach(input => input.disabled = true);
                        verifyOtpButton.disabled = true;
                    } else {
                        displayFormError('otp', data.message || 'Invalid OTP!');
                        isOtpVerified = false;
                    }
                } catch (error) {
                    console.error('Error verifying OTP:', error);
                    Swal.fire('Error', 'Failed to verify OTP.', 'error');
                    isOtpVerified = false;
                } finally {
                    verifyOtpButton.disabled = false;
                }
            });

            // Form Submission
            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                if (!isOtpSent) {
                    Swal.fire('Error', 'Please send the OTP first!', 'error');
                    return;
                }

                if (!isOtpVerified) {
                    Swal.fire('Error', 'Please verify the OTP first!', 'error');
                    return;
                }

                const formData = new FormData(form);
                const jsonData = Object.fromEntries(formData);

                // Validate passwords
                let errors = validateForm(jsonData);
                if (errors) {
                    console.log('Validation error : ', errors)
                    displayFormErrors(form, errors);
                    return;
                }

                try {
                    const response = await fetch('/changepassword', {
                        method: 'PATCH',
                        body: JSON.stringify(jsonData),
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();

                    if (!data.success) {
                        if (data.errors) {
                            displayFormErrors(form, data.errors);
                        } else {
                            Swal.fire('Error', data.message || 'Failed to update password.', 'error');
                        }
                        return;
                    }

                    Swal.fire('Success', data.message || 'Password updated successfully!', 'success')
                        .then(() => {
                            form.reset();
                            otpInputs.forEach(input => input.value = ''); // Clear OTP inputs
                            // Reset states
                            isOtpSent = false;
                            isOtpVerified = false;
                            newPasswordInput.disabled = true;
                            confirmPasswordInput.disabled = true;
                            submitButton.disabled = true;
                            currentPasswordInput.disabled = false;
                            sendOtpButton.disabled = false;
                            otpInputs.forEach(input => input.disabled = true);
                            verifyOtpButton.disabled = true;
                        });
                } catch (error) {
                    console.error('Error updating password:', error);
                    Swal.fire('Error', 'Something went wrong while updating the password.', 'error');
                }
            });

            function validateForm(data) {
                let errors = {};

                // if (!data.currentPassword) {
                //     errors.currentPassword = "Current password is required!";
                // }

                if (!data.newPassword) {
                    errors.newPassword = "New password is required!";
                } else if (data.newPassword.length < 8) {
                    errors.newPassword = "New password must be at least 8 characters long!";
                }

                if (!data.confirmPassword) {
                    errors.confirmPassword = "Confirm password is required!";
                } else if (data.newPassword !== data.confirmPassword) {
                    errors.confirmPassword = "Passwords do not match!";
                }

                return Object.keys(errors).length > 0 ? errors : null;
            }

            function displayFormErrors(form, errors) {
                clearErrors(form);
                if (errors && typeof errors === 'object') {
                    Object.entries(errors).forEach(([field, message]) => {
                        if (field === 'otp') {
                            const otpWrapper = document.getElementById('otpInputs');
                            otpWrapper.classList.add('is-invalid');
                            const feedback = otpWrapper.parentElement.querySelector('.invalid-feedback');
                            if (feedback) {
                                feedback.textContent = message;
                            }
                        } else {
                            const input = form.querySelector(`.${field}`);
                            if (input) {
                                input.classList.add('is-invalid');
                                const feedback = input.parentElement.querySelector('.invalid-feedback');
                                if (feedback) {
                                    feedback.textContent = message;
                                }
                            }
                        }
                    });
                }
            }

            
            function displayFormError(field, message) {
                clearErrors(form);
                if (field === 'otp') {
                    const otpWrapper = document.getElementById('otpInputs');
                    otpWrapper.classList.add('is-invalid');
                    const feedback = otpWrapper.parentElement.querySelector('.invalid-feedback');
                    if (feedback) {
                        feedback.textContent = message;
                    }
                } else {
                    const input = form.querySelector(`[name="${field}"]`);
                    if (input) {
                        input.classList.add('is-invalid');
                        const feedback = input.parentElement.querySelector('.invalid-feedback');
                        if (feedback) {
                            feedback.textContent = message;
                        }
                    }
                }
            }


            // function displayFormError(form, errors){
            //     clearErrors(form)

            //     if(errors && typeof errors === 'object'){
            //         Object.entries(errors).forEach(([field,message]) => {

            //             const input = form.querySelector(`.${field}`) 
                                                                
            //             if(input){
            //                 input.classList.add('is-invalid')
            //                 const feedback = input.nextElementSibling;
            //                 if(feedback && feedback.classList.contains('invalid-feedback')){
            //                     feedback.textContent = message
            //                 } else {
            //                     const feedbackDiv = document.createElement('div');
            //                     feedbackDiv.className = 'invalid-feedback';
            //                     feedbackDiv.textContent = message;
            //                     input.parentNode.appendChild(feedbackDiv);
            //                 }
            //             }
            //         })
            //     }
            // }


            function clearErrors(form) {
                form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
                form.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
            }
        });
    </script>
</body>
</html>