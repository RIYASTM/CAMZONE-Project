<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CAMZONE-SHOP</title>
    <link rel="stylesheet" href="/stylesheet/user/shop.css">
</head>
<body>
    <header>
        <%- include('../partials/users/header', {search, cart}) %>
    </header>
    <nav>
        <a href="/">Home</a> > <a href="/shop">All Products</a>
    </nav>
    <div class="container">
        <aside class="sidebar">
            <p><button id="clear-all">Clear All Filters</button></p>
            <h2>Filter</h2>
            <p>0 Selected <span><a href="#" id="reset-filter">Reset</a></span></p>
            <label><input type="radio" name="name" class="sortName" value="A-Z"> A - Z </label><br>
            <label><input type="radio" name="name" class="sortName" value="Z-A"> Z - A </label><br>
            
            <!-- Price Filter -->
            <h2>Price</h2>
            <p>0 Selected <span><a href="#" id="reset-price">Reset</a></span></p>
            <label><input type="radio" name="price" class="filterPrice" value="LOW-HIGH"> LOW - HIGH</label><br>
            <label><input type="radio" name="price" class="filterPrice" value="HIGH-LOW"> HIGH - LOW</label><br>
            <label><input type="radio" name="price" class="filterPrice" value="below-10000"> BELOW - 10000</label><br>
            <label><input type="radio" name="price" class="filterPrice" value="10000-50000"> 10000 - 50000</label><br>
            <label><input type="radio" name="price" class="filterPrice" value="50000-100000"> 50000 - 100000</label><br>
            <label><input type="radio" name="price" class="filterPrice" value="100000-500000"> 100000 - 500000</label><br>
            <label><input type="radio" name="price" class="filterPrice" value="above-500000"> ABOVE 500000</label><br>
            
            <!-- Categories Filter -->
            <h2>Categories</h2>
            <p>0 Selected <span><a href="#" id="reset-category">Reset</a></span></p>
            <% if (category && category.length > 0) { %>
                <% category.forEach(cat => { %>
                    <% if (cat.isListed) { %>
                        <label><input type="checkbox" name="category" class="category" value="<%= cat._id %>"> <%= cat.name %></label><br>
                    <% } %>
                <% }) %>
            <% } else { %>
                <p>No categories available.</p>
            <% } %>
            
            <!-- Brand Filter -->
            <h2>Brand</h2>
            <p>0 Selected <span><a href="#" id="reset-brand">Reset</a></span></p>
            <% if (brands && brands.length > 0) { %>
                <% brands.forEach(brand => { %>
                    <% if (!brand.isBlocked) { %>
                        <label><input type="checkbox" name="brand" class="brand" value="<%= brand._id %>"> <%= brand.brandName %></label><br>
                    <% } %>
                <% }) %>
            <% } else { %>
                <p>No brands available.</p>
            <% } %>
        </aside>

        <main class="product-grid">
            <!-- Dynamic Product Listing -->
            <% if (products && products.length > 0) { %>
                <% products.forEach(product => { %>
                    <div class="product-card">
                        <div class="wishlist-btn <%= wishlistItems.includes(product._id.toString()) ? 'active' : '' %>" data-id="<%= product._id %>">
                            <i class="fa fa-heart"></i>
                        </div>
                        <a href="/product?id=<%= product._id %>">
                            <% if (product.productImage && (Array.isArray(product.productImage) ? product.productImage.length > 0 : product.productImage)) { %>
                                <img src="/uploads/products/<%= Array.isArray(product.productImage) ? product.productImage[0] : product.productImage %>" alt="<%= product.productName %>">
                            <% } else { %>
                                <span>No Image</span>
                            <% } %>
                            <h3><%= product.productName.slice(0, 23) %></h3>
                            <p>₹<%= product.salePrice %> <span class="old-price">₹<%= product.regularPrice %></span></p>
                            <div class="rating">
                                <%= '★'.repeat(Math.round(product.rating) || 1) %>
                                <% if (product.reviews) { %>
                                    (<%= product.reviews %>)
                                <% } %>
                            </div>
                        </a>
                    </div>
                <% }) %>
            <% } else { %>
                <p>No products available.</p>
            <% } %>
        </main>
    </div>

    <!--Pagination -->
    <div class="pagination" data-total-pages="<%= totalPages %>">
        <span><%= currentPages %> of <%= totalPages %></span>
        <div class="pagination-controls">
            <button <%= currentPages === 1 ? 'disabled' : '' %> 
                    onclick="window.location.href='?page=1<%= finalQuery ? `&${finalQuery}` : '' %>'" 
                    title="Go to first page"><i class="fas fa-angle-double-left"></i></button>
            
            <button <%= currentPages === 1 ? 'disabled' : '' %> 
                    onclick="window.location.href='?page=<%= currentPages - 1 %><%= finalQuery ? `&${finalQuery}` : '' %>'" 
                    title="Previous page"><i class="fas fa-angle-left"></i></button>
            
            <span> - </span>
            
            <button <%= currentPages === totalPages ? 'disabled' : '' %> 
                    onclick="window.location.href='?page=<%= parseInt(currentPages) + 1 %><%= finalQuery ? `&${finalQuery}` : '' %>'" 
                    title="Next page"><i class="fas fa-angle-right"></i></button>
            
            <button <%= currentPages === totalPages ? 'disabled' : '' %> 
                    onclick="window.location.href='?page=<%= totalPages %><%= finalQuery ? `&${finalQuery}` : '' %>'" 
                    title="Go to last page"><i class="fas fa-angle-double-right"></i></button>
        </div>
    </div>

    <div class="banner-image"></div>

    

    <footer>
        <%- include('../partials/users/footer') %>
    </footer>

    <script src="/javascript/users/shop.js"></script>

    <!-- <script>
        document.addEventListener("DOMContentLoaded", () => {
            const brandCheckboxes = document.querySelectorAll('.brand');
            const categoryCheckBoxes = document.querySelectorAll('.category');
            const filterPrices = document.querySelectorAll('.filterPrice');
            const sortNames = document.querySelectorAll('.sortName');
            const stockSort = document.querySelectorAll('.stock');
            const resetFilter = document.getElementById('reset-filter');
            const resetPrice = document.getElementById('reset-price');
            const resetavailability = document.getElementById('reset-availability');
            const resetCategory = document.getElementById('reset-category');
            const resetBrand = document.getElementById('reset-brand');
            const clearAllBtn = document.getElementById('clear-all');
            const searchValue = document.getElementById('search').value

            console.log('search : ', searchValue.toLowerCase().slice(0, -1))

            function applyFilters() {
                const selectedBrands = Array.from(brandCheckboxes)
                    .filter(cb => cb.checked)
                    .map(cb => cb.value);

                const selectedCategories = Array.from(categoryCheckBoxes)
                    .filter(cb => cb.checked)
                    .map(cb => cb.value);

                const selectedPrices = document.querySelector('input.filterPrice:checked')?.value || '';
                const selectedSortName = document.querySelector('input.sortName:checked')?.value || '';
                const selectedStockSort = document.querySelector('input.stock:checked')?.value || '';

                let queryParts = [];
                

                if (selectedBrands.length > 0) {
                    queryParts.push(selectedBrands.map(b => `brand=${encodeURIComponent(b)}`).join('&'));
                }

                if (selectedCategories.length > 0) {
                    queryParts.push(selectedCategories.map(c => `category=${encodeURIComponent(c)}`).join('&'));
                }

                if (selectedPrices) {
                    queryParts.push(`price=${encodeURIComponent(selectedPrices)}`);
                }

                if (selectedSortName) {
                    queryParts.push(`sortName=${encodeURIComponent(selectedSortName)}`);
                }

                if (selectedStockSort) {
                    queryParts.push(`sortQuantity=${encodeURIComponent(selectedStockSort)}`);
                }

                if(searchValue){
                    queryParts.push(`search=${encodeURIComponent(searchValue)}`)
                }

                // Preserve the current page if it exists
                const params = new URLSearchParams(window.location.search);
                console.log('params : ', params)
                const currentPage = params.get('page') || '1';
                queryParts.push(`page=${currentPage}`);

                const finalQuery = queryParts.join('&');

                console.log('Filters: ', finalQuery);

                if (finalQuery) {
                    window.location.href = `/shop?${finalQuery}`;
                } else {
                    window.location.href = '/shop';
                }
            }

            // Event Listeners for Filters and Sorting
            brandCheckboxes.forEach(cb => {
                const labelName = cb.parentElement.textContent.trim().toLowerCase()
                const search = searchValue.trim().toLowerCase()
                if(labelName === search){
                    cb.checked = true
                }
                // if(search.toLowerCase() === cb) cb.checked = true
                cb.addEventListener('change', applyFilters)
            });
            categoryCheckBoxes.forEach(cb => {
                const labelName = cb.parentElement.textContent.trim().toLowerCase()
                const search = searchValue.trim().toLowerCase()
                if(labelName === search || search === labelName.slice(0, -1)){
                    cb.checked = true
                }
                cb.addEventListener('change', applyFilters)
            });
            filterPrices.forEach(radio => radio.addEventListener('change', applyFilters));
            sortNames.forEach(radio => radio.addEventListener('change', applyFilters));
            stockSort.forEach(radio => radio.addEventListener('change', applyFilters));

            

            // Reset Filter Handlers
            resetFilter.addEventListener('click', (e) => {
                e.preventDefault();
                sortNames.forEach(cb => cb.checked = false);
                applyFilters();
            });

            resetPrice.addEventListener('click', (e) => {
                e.preventDefault();
                filterPrices.forEach(cb => cb.checked = false);
                applyFilters();
            });

            resetBrand.addEventListener('click', (e) => {
                e.preventDefault();
                brandCheckboxes.forEach(cb => cb.checked = false);
                applyFilters();
            });

            resetCategory.addEventListener('click', (e) => {
                e.preventDefault();
                categoryCheckBoxes.forEach(cb => cb.checked = false);
                applyFilters();
            });

            if (resetavailability) {
                resetavailability.addEventListener('click', (e) => {
                    e.preventDefault();
                    stockSort.forEach(cb => cb.checked = false);
                    applyFilters();
                });
            }

            clearAllBtn.addEventListener('click', (e) => {
                e.preventDefault();
                document.querySelectorAll('input[type="checkbox"], input[type="radio"]').forEach(input => {
                    input.checked = false;
                });
                const searches = searchValue ? `search=${encodeURIComponent(searchValue)}` : ''
                window.location.href = `/shop?${searches}`;
            });

            // Parse URL query parameters and set the state of inputs
            const params = new URLSearchParams(window.location.search);

            // Set checkboxes for brands
            const selectedBrands = params.getAll('brand');
            brandCheckboxes.forEach(cb => {
                if (selectedBrands.includes(cb.value)) {
                    cb.checked = true;
                }
            });

            // Set checkboxes for categories
            const selectedCategories = params.getAll('category');
            categoryCheckBoxes.forEach(cb => {
                if (selectedCategories.includes(cb.value)) {
                    cb.checked = true;
                }
            });

            // Set radio for price filter
            const price = params.get('price');
            if (price) {
                const input = document.querySelector(`.filterPrice[value="${price}"]`);
                if (input) input.checked = true;
            }

            // Set radio for sort name
            const sortName = params.get('sortName');
            if (sortName) {
                const input = document.querySelector(`.sortName[value="${sortName}"]`);
                if (input) input.checked = true;
            }

            // Update "Selected" counts in the UI
            document.querySelectorAll('.sidebar p').forEach(p => {
                if (p.textContent.includes('Selected')) {
                    const sectionHeader = p.parentElement.querySelector('h2').textContent;
                    let count = 0;
                    if (sectionHeader === 'Filter') {
                        count = document.querySelectorAll('input.sortName:checked').length;
                    } else if (sectionHeader === 'Price') {
                        count = document.querySelectorAll('input.filterPrice:checked').length;
                    } else if (sectionHeader === 'Categories') {
                        count = document.querySelectorAll('input.category:checked').length;
                    } else if (sectionHeader === 'Brand') {
                        count = document.querySelectorAll('input.brand:checked').length;
                    }
                    p.firstChild.textContent = `${count} Selected `;
                }
            });

            document.querySelectorAll(".wishlist-btn").forEach(button => {
                button.addEventListener("click", function (e) {
                    e.stopPropagation();
                    const productId = this.getAttribute("data-id");
                    addtoWishlist(productId);
                });
            });
        });


        function addtoWishlist(productId) {
            fetch('/addtowishlist', {
                method: 'POST',
                body: JSON.stringify({ productId }),
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(response => response.json())
                .then(data => {
                    if (data.success) {

                        // showNotification('Product added to Your Wishlist!', 'success');
                        const icon = document.querySelector(`.wishlist-btn[data-id="${productId}"]`);

                        if (icon) {
                            if (data.done === 'Added') {
                                icon.classList.add('active');
                            } else if (data.done === 'Removed') {
                                icon.classList.remove('active')
                            }
                        }

                    } else {
                        showNotification(data.message || 'Failed to add to wishlist!', 'error');
                    }
                }).catch(() => {
                    showNotification('Request failed!', 'error');
                });
        } 


        function showNotification(message, type) {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;

            // Add styles
            notification.style.cssText = `
                            position: fixed;
                            top: 20px;
                            right: 20px;
                            padding: 15px 20px;
                            border-radius: 5px;
                            color: white;
                            font-weight: 500;
                            z-index: 1000;
                            animation: slideIn 0.3s ease;
                            ${type === 'success' ? 'background-color: #4CAF50;' : 'background-color: #f44336;'}
                        `;

            // Add animation styles
            const style = document.createElement('style');
            style.textContent = `
                            @keyframes slideIn {
                                from {
                                    transform: translateX(100%);
                                    opacity: 0;
                                }
                                to {
                                    transform: translateX(0);
                                    opacity: 1;
                                }
                            }
                            @keyframes slideOut {
                                from {
                                    transform: translateX(0);
                                    opacity: 1;
                                }
                                to {
                                    transform: translateX(100%);
                                    opacity: 0;
                                }
                            }
                        `;

            if (!document.querySelector('style[data-notification]')) {
                style.setAttribute('data-notification', 'true');
                document.head.appendChild(style);
            }

            // Add to page
            document.body.appendChild(notification);

            // Remove after 3 seconds
            setTimeout(() => {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }
    
    
    </script> -->
</body>
</html>